title: "Mastering Distributed Systems with Kafka"
description: "Deep dive into Kafka's distributed streaming platform. Learn about broker registration, controller metadata handling, topic creation, and partition management."
icon: "fas fa-stream"
category: "Distributed Systems"
sections:
  - title: "Introduction"
    slides:
      - type: "text"
        title: "Introduction Kafka's architecture"
        bullets:
          - "Apache Kafka is a distributed pub-sub platform"
          - "It uses Zookeeper as a 'consistent core' to coordinate cluster activities"
          - "Cluster activities include managing group membership and failure detection"
        notes: "Emphasize that consensus is not just about agreement, but about maintaining consistency in the face of failures. This sets up the motivation for the following diagrams."
      
      - type: "text"
        title: "Common Requirements for a cluster"
        bullets:
          - "Group Membership and Metadata management"
          - "Failure Detection and Recovery"
          - "Information Dissemination"

  - title: "Cluster Management"
    slides:
      - type: "diagram"
        title: "Managing Group Membership"
        diagramRef: "cluster_group_membership"
        notes: "Shows how the leader node tracks membership and detects failures using heartbeats."

      - type: "diagram"
        title: "Need to Manage Cluster Metadata/Configuration"
        diagramRef: "cluster_metadata"
        notes: "Highlights how Kafka partitions and task assignments are managed within the cluster."

      - type: "diagram"
        title: "Consistency Needs for Metadata Replication"
        diagramRef: "cluster_metadata_consistency"
        notes: "Illustrates the importance of keeping metadata in sync when a new leader takes over."

  - title: "Broker Registration"
    slides:
      - type: "diagram"
        title: "Brokers use Zookeeper for registering"
        diagramRef: "zookeeper_cluster"
        notes: "Zookeeper uses consensus mechanism called Zab which gives strong consistency guarantee and fault tolerance."

      - type: "diagram"
        title: "Broker Registration Process"
        diagramRef: "kafka_broker_registration"
        notes: "Brokers register with Zookeeper at startup to join the cluster"

  - title: "Data Distribution"
    slides:
      - type: "diagram"
        title: "Hash of the key used for mapping to nodes"
        diagramRef: "hash_mapped_to_nodes"
        notes: "Shows how consistent hashing maps keys to nodes in a distributed system"

      - type: "diagram"
        title: "All data needs to be shuffled if one extra node is added"
        diagramRef: "hash_mapped_to_nodes2"
        notes: "Illustrates the data redistribution challenge when adding nodes to the cluster"

      - type: "diagram"
        title: "Number of partitions is fixed"
        diagramRef: "hash_mapped_to_fixed_partitions"
        notes: "Controller is responsible for managing the cluster based on metadata changes in Zookeeper"

  - title: "Cluster Operations"
    slides:
      - type: "diagram"
        title: "One of the brokers is chosen as the Controller"
        diagramRef: "kafka_controller_metadata_handling"
        notes: "Controller is responsible for managing the cluster based on metadata changes in Zookeeper"

      - type: "diagram"
        title: "Topic Creation uses fixed number of partitions"
        diagramRef: "kafka_topic_creation"
        notes: "Controller is responsible for managing the cluster based on metadata changes in Zookeeper"
        
      - type: "diagram"
        title: "Brokers handle LeaderAndIsrRequest"
        diagramRef: "kafka_handle_leaderIsr_request"
        notes: "Brokers create log files"