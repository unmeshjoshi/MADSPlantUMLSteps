// [step1 {"name":"Database Problem Setup"}]
digraph SimpleDatabase {
    rankdir=TB;
    node [shape=record, fontname="Helvetica"];
    
    problem [label="Database Problem|Find Customer ID 65,000|from 1 Million Records", fillcolor="lightcoral", style="filled"];
    file [label="customers.dat|100MB file|25,000 pages", fillcolor="lightyellow", style="filled"];
    linear [label="Linear Search|Read ALL pages|Sequentially", fillcolor="lightgray", style="filled"];
    
    problem -> file -> linear;
    
    note [shape=note, fillcolor="wheat", style="filled",
          label="Without B+Tree Index:\n• Average: 12,500 page reads\n• Time: ~2.5 seconds\n• Unacceptable for real-time queries"];
    
    { rank=same; problem }
    { rank=same; file }
    { rank=same; linear }
}
// [/step1]

// [step2 {"name":"B+Tree Solution Introduction"}]
digraph BTreeSolution {
    rankdir=TB;
    node [shape=record, fontname="Helvetica"];
    
    root [label="Root Node|(Always in Memory)", fillcolor="lightgreen", style="filled"];
    internal [label="Internal Node|(Cached on Demand)", fillcolor="lightblue", style="filled"];
    leaf [label="Leaf Node|(Contains Data)", fillcolor="lightyellow", style="filled"];
    
    root -> internal -> leaf;
    
    performance [shape=ellipse, fillcolor="lightcyan", style="filled",
                 label="B+Tree Performance:\n• Height: 3 levels\n• Page reads: 3-4 maximum\n• Time: ~0.3 milliseconds\n• 8,000x improvement!"];
    
    leaf -> performance;
    
    { rank=same; root }
    { rank=same; internal }
    { rank=same; leaf }
}
// [/step2]

// [step3 {"name":"Step 1: Start at Root Node (Page 0)"}]
digraph BTreeTraversal_Root {
    rankdir=TB;
    node [shape=record, fontname="Helvetica"];
    
    // Root node being accessed
    root [label="<f0>100K|<f1>500K|<f2>800K", fillcolor="gold", style="filled", penwidth=3, color="red"];
    
    // Internal nodes (not yet accessed)
    internal1 [label="<f0>25K|<f1>50K|<f2>75K", fillcolor="lightgray", style="filled,dashed"];
    internal2 [label="<f0>300K|<f1>400K|<f2>450K", fillcolor="lightgray", style="filled,dashed"];
    internal3 [label="<f0>600K|<f1>700K|<f2>750K", fillcolor="lightgray", style="filled,dashed"];
    internal4 [label="<f0>850K|<f1>900K|<f2>950K", fillcolor="lightgray", style="filled,dashed"];
    
    // Leaf nodes (not yet accessed)
    leaf1 [label="1-25K", fillcolor="lightgray", style="filled,dashed"];
    leaf2 [label="25K-50K", fillcolor="lightgray", style="filled,dashed"];
    leaf3 [label="50K-75K", fillcolor="lightgray", style="filled,dashed"];
    leaf4 [label="75K-100K", fillcolor="lightgray", style="filled,dashed"];
    
    // Connections
    root:f0 -> internal1;
    root:f1 -> internal2;
    root:f2 -> internal3;
    root -> internal4;
    
    internal1:f0 -> leaf1;
    internal1:f1 -> leaf2;
    internal1:f2 -> leaf3;
    internal1 -> leaf4;
    
    // Search information
    search_info [shape=note, fillcolor="lightyellow", style="filled",
                 label="Search for: 65,000\n\nRoot Analysis:\n• 65,000 < 100,000 ✓\n• Follow pointer to Internal A\n\nPage Reads: 1"];
    
    { rank=same; root }
    { rank=same; internal1, internal2, internal3, internal4 }
    { rank=same; leaf1, leaf2, leaf3, leaf4 }
}
// [/step3]

// [step4 {"name":"Step 2: Navigate to Internal Node A (Page 1)"}]
digraph BTreeTraversal_Internal {
    rankdir=TB;
    node [shape=record, fontname="Helvetica"];
    
    // Root node (accessed)
    root [label="<f0>100K|<f1>500K|<f2>800K", fillcolor="lightgreen", style="filled"];
    
    // Internal node being accessed
    internal1 [label="<f0>25K|<f1>50K|<f2>75K", fillcolor="gold", style="filled", penwidth=3, color="red"];
    internal2 [label="<f0>300K|<f1>400K|<f2>450K", fillcolor="lightgray", style="filled,dashed"];
    internal3 [label="<f0>600K|<f1>700K|<f2>750K", fillcolor="lightgray", style="filled,dashed"];
    internal4 [label="<f0>850K|<f1>900K|<f2>950K", fillcolor="lightgray", style="filled,dashed"];
    
    // Leaf nodes
    leaf1 [label="1-25K", fillcolor="lightgray", style="filled,dashed"];
    leaf2 [label="25K-50K", fillcolor="lightgray", style="filled,dashed"];
    leaf3 [label="50K-75K", fillcolor="lightgray", style="filled,dashed"];
    leaf4 [label="75K-100K", fillcolor="lightgray", style="filled,dashed"];
    
    // Connections
    root:f0 -> internal1 [color="red", penwidth=3];
    root:f1 -> internal2 [color="lightgray", style="dashed"];
    root:f2 -> internal3 [color="lightgray", style="dashed"];
    root -> internal4 [color="lightgray", style="dashed"];
    
    internal1:f0 -> leaf1 [color="lightgray", style="dashed"];
    internal1:f1 -> leaf2 [color="lightgray", style="dashed"];
    internal1:f2 -> leaf3 [color="orange", penwidth=2, style="dotted"];
    internal1 -> leaf4 [color="lightgray", style="dashed"];
    
    // Search information
    search_info [shape=note, fillcolor="lightyellow", style="filled",
                 label="Search for: 65,000\n\nInternal A Analysis:\n• 50,000 < 65,000 < 75,000 ✓\n• Follow pointer to Leaf 3\n\nPage Reads: 2"];
    
    { rank=same; root }
    { rank=same; internal1, internal2, internal3, internal4 }
    { rank=same; leaf1, leaf2, leaf3, leaf4 }
}
// [/step4]

// [step5 {"name":"Step 3: Reach Leaf Node 3 (Page 2) - Found!"}]
digraph BTreeTraversal_Leaf {
    rankdir=TB;
    node [shape=record, fontname="Helvetica"];
    
    // Root node (accessed)
    root [label="<f0>100K|<f1>500K|<f2>800K", fillcolor="lightgreen", style="filled"];
    
    // Internal node (accessed)
    internal1 [label="<f0>25K|<f1>50K|<f2>75K", fillcolor="lightblue", style="filled"];
    internal2 [label="<f0>300K|<f1>400K|<f2>450K", fillcolor="lightgray", style="filled,dashed"];
    internal3 [label="<f0>600K|<f1>700K|<f2>750K", fillcolor="lightgray", style="filled,dashed"];
    internal4 [label="<f0>850K|<f1>900K|<f2>950K", fillcolor="lightgray", style="filled,dashed"];
    
    // Leaf nodes
    leaf1 [label="1-25K", fillcolor="lightgray", style="filled,dashed"];
    leaf2 [label="25K-50K", fillcolor="lightgray", style="filled,dashed"];
    leaf3 [label="Customer 65,000|FOUND!|John Smith", fillcolor="gold", style="filled", penwidth=3, color="red"];
    leaf4 [label="75K-100K", fillcolor="lightgray", style="filled,dashed"];
    
    // Connections - highlight the path taken
    root:f0 -> internal1 [color="red", penwidth=3];
    root:f1 -> internal2 [color="lightgray", style="dashed"];
    root:f2 -> internal3 [color="lightgray", style="dashed"];
    root -> internal4 [color="lightgray", style="dashed"];
    
    internal1:f0 -> leaf1 [color="lightgray", style="dashed"];
    internal1:f1 -> leaf2 [color="lightgray", style="dashed"];
    internal1:f2 -> leaf3 [color="red", penwidth=3];
    internal1 -> leaf4 [color="lightgray", style="dashed"];
    
    // Search information
    search_info [shape=note, fillcolor="lightgreen", style="filled",
                 label="Search COMPLETE!\n\nCustomer 65,000 FOUND!\n\nTotal Page Reads: 3\nVs Linear: 1,625 reads\nImprovement: 541x faster!"];
    
    { rank=same; root }
    { rank=same; internal1, internal2, internal3, internal4 }
    { rank=same; leaf1, leaf2, leaf3, leaf4 }
}
// [/step5]

// [step6 {"name":"Complete Search Path Summary"}]
digraph BTreeTraversal_Complete {
    rankdir=TB;
    node [shape=record, fontname="Helvetica"];
    
    // Show all accessed nodes with checkmarks
    root [label="✓ <f0>100K|<f1>500K|<f2>800K", fillcolor="lightgreen", style="filled"];
    
    internal1 [label="✓ <f0>25K|<f1>50K|<f2>75K", fillcolor="lightblue", style="filled"];
    internal2 [label="<f0>300K|<f1>400K|<f2>450K|SKIPPED", fillcolor="lightgray", style="filled,dashed"];
    internal3 [label="<f0>600K|<f1>700K|<f2>750K|SKIPPED", fillcolor="lightgray", style="filled,dashed"];
    internal4 [label="<f0>850K|<f1>900K|<f2>950K|SKIPPED", fillcolor="lightgray", style="filled,dashed"];
    
    // Leaf nodes
    leaf1 [label="1-25K|SKIPPED", fillcolor="lightgray", style="filled,dashed"];
    leaf2 [label="25K-50K|SKIPPED", fillcolor="lightgray", style="filled,dashed"];
    leaf3 [label="✓ Customer 65,000|FOUND!", fillcolor="gold", style="filled"];
    leaf4 [label="75K-100K|SKIPPED", fillcolor="lightgray", style="filled,dashed"];
    
    // Highlight the complete traversal path
    root:f0 -> internal1 [color="red", penwidth=4, label="Decision: 65K < 100K"];
    root:f1 -> internal2 [color="lightgray", style="dashed"];
    root:f2 -> internal3 [color="lightgray", style="dashed"];
    root -> internal4 [color="lightgray", style="dashed"];
    
    internal1:f0 -> leaf1 [color="lightgray", style="dashed"];
    internal1:f1 -> leaf2 [color="lightgray", style="dashed"];
    internal1:f2 -> leaf3 [color="red", penwidth=4, label="Decision: 50K < 65K < 75K"];
    internal1 -> leaf4 [color="lightgray", style="dashed"];
    
    // Performance summary
    performance [shape=note, fillcolor="lightcyan", style="filled",
                 label="B+Tree Efficiency:\n\n✓ Only 3 nodes examined\n✓ Only 2 disk reads required\n✓ 99.8% of nodes skipped\n✓ Logarithmic complexity O(log n)"];
    
    { rank=same; root }
    { rank=same; internal1, internal2, internal3, internal4 }
    { rank=same; leaf1, leaf2, leaf3, leaf4 }
}
// [/step6]

// [step7 {"name":"Performance Comparison Summary"}]
digraph PerformanceComparison {
    rankdir=TB;
    node [shape=record, fontname="Helvetica"];
    
    // Two approaches
    subgraph cluster_linear {
        label="Linear Search (No Index)";
        color=red;
        style=filled;
        fillcolor=mistyrose;
        
        linear_steps [label="Linear Process:|1. Start at page 1|2. Read sequentially|3. Check each page|4. Continue until found||Result: 1,625 reads|Time: ~1.6 seconds", fillcolor="lightcoral", style="filled"];
    }
    
    subgraph cluster_btree {
        label="B+Tree Search (With Index)";
        color=green;
        style=filled;
        fillcolor=lightgreen;
        
        btree_steps [label="B+Tree Process:|1. Start at root|2. Navigate internal|3. Navigate to leaf|4. Find target||Result: 2 reads|Time: ~0.2 milliseconds", fillcolor="lightblue", style="filled"];
    }
    
    // Comparison
    improvement [label="Performance Gain:|812x fewer reads|8,000x faster|Sub-millisecond response", fillcolor="gold", style="filled"];
    
    linear_steps -> improvement [style="dashed", color="red", penwidth=2];
    btree_steps -> improvement [style="solid", color="green", penwidth=2];
    
    { rank=same; linear_steps, btree_steps }
    { rank=same; improvement }
}
// [/step7]
