@startuml
!include ../../style.puml

' Scale the diagram for better visibility
scale 1.5

' Improve spacing and font sizes
skinparam defaultFontSize 14
skinparam rectangleFontSize 12
skinparam rectanglePadding 20
skinparam rectangleMargin 10

title Row-based vs Column-based Storage

' [step1 {"name":"Row-based Storage"}]
note as N1
  **Row-based storage:**
  • Stores all fields of a record together
  • Optimized for record retrieval
  • Less efficient for analytical queries
  • Common in OLTP databases
end note

rectangle "Row-based Storage\n(Traditional OLTP)" as RowStorage #LightBlue {
  rectangle "Record 1" as Row1 #LightYellow {
    rectangle "ID: 1\nName: Alice\nAge: 25\nCity: New York" as Rec1
  }
  
  rectangle "Record 2" as Row2 #LightYellow {
    rectangle "ID: 2\nName: Bob\nAge: 30\nCity: San Francisco" as Rec2
  }
  
  rectangle "Record 3" as Row3 #LightYellow {
    rectangle "ID: 3\nName: Charlie\nAge: 35\nCity: Chicago" as Rec3
  }
}

N1 --> RowStorage
' [/step1]

' [step2 {"name":"Column-based Storage", "newPage":"true"}]
note as N2
  **Column-based storage:**
  • Stores all values of a column together
  • Better compression (similar values together)
  • Efficient for analytical queries
  • Only reads needed columns
end note

rectangle "Column-based Storage\n(Parquet Format)" as ColStorage #LightGreen {
  rectangle "ID Column\n(Integer)" as IDCol #Orange {
    rectangle "1\n2\n3" as IDValues
  }
  
  rectangle "Name Column\n(String)" as NameCol #Orange {
    rectangle "Alice\nBob\nCharlie" as NameValues
  }
  
  rectangle "Age Column\n(Integer)" as AgeCol #Orange {
    rectangle "25\n30\n35" as AgeValues
  }
  
  rectangle "City Column\n(String)" as CityCol #Orange {
    rectangle "New York\nSan Francisco\nChicago" as CityValues
  }
}

N2 --> ColStorage
' [/step2]

' [step3 {"name":"Query Comparison"}]
note as N3
  **Performance Comparison:**
  
  Row-based storage:
  • Must read ALL columns for every row
  • Processes unnecessary data (ID, Name, City)
  • Higher I/O overhead
  
  Column-based storage:
  • Only reads the Age column
  • Skips other columns completely
  • 75% less I/O for this query
end note

rectangle "Query Example:\nSELECT AVG(Age) FROM Users" as Query #LightCyan

N3 --> Query
RowStorage --> Query : "Reads ALL data\n(unnecessary I/O)"
ColStorage --> Query : "Reads ONLY Age column\n(efficient I/O)"
' [/step3]

' [step4 {"name":"Compression Benefits", "newPage":"true"}]
note as N4
  **Parquet Compression Advantages:**
  • Similar values stored consecutively
  • Type-specific compression algorithms
  • Dictionary encoding for repeated strings
  • Run-length encoding for sequences
  • Delta encoding for sorted numeric data
  • Bit-packing for small integers
end note

rectangle "Compression Comparison" as Compression #LightPink {
  rectangle "Row Storage\nCompression" as RowComp #PaleGreen {
    rectangle "Mixed Data Types\n[1, 'Alice', 25, 'NY']\n[2, 'Bob', 30, 'SF']\n\nLower Compression\n~30-50% reduction" as RowDetails
  }
  
  rectangle "Column Storage\nCompression" as ColComp #LightSalmon {
    rectangle "Same Data Types\nID: [1,2,3] → Delta: [1,+1,+1]\nAge: [25,30,35] → Delta: [25,+5,+5]\n\nHigher Compression\n~70-90% reduction" as ColDetails
  }
}

N4 --> Compression
' [/step4]

@enduml
