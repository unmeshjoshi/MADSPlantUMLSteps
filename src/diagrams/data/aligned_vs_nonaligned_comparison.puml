@startuml

!include ../../style.puml

' [step1 {"name":"Step 1: Developer's Hope - Direct Memory Access"}]
participant "Application" as app
participant "Virtual Memory" as vmem
participant "Kernel" as kernel
participant "Storage Device" as disk
participant "OS Page Cache" as oscache
participant "CPU Cache" as cpucache

note over app
**Developer's Hope:**
mmap() file, then access ptr[1024]
to read just Node B (1KB)
end note

app -> vmem: mmap(file.dat)
activate vmem
vmem -> app: returns memory pointer
deactivate vmem

note over app, vmem
**Hope:** Memory mapping gives illusion
of direct access - touch only what you need
end note
' [/step1]

' [step2 {"name":"Step 2: Reality - Page Fault Triggers Full Page Load", "newPage": "true"}]
app -> vmem: access ptr[1024] (Node B)
activate vmem

note over vmem
**PAGE FAULT!**
Requested page not in memory
end note

vmem -> kernel: page fault exception
activate kernel

note over kernel
**Kernel Reality:**
Must read entire 4KB page
Cannot selectively load 1KB
end note

kernel -> disk: read 4KB page from file
activate disk
disk -> kernel: returns 4KB data\n(Node A + B + C + D)
deactivate disk

kernel -> oscache: store 4KB in page cache
activate oscache
note over oscache
**4KB Page Cache Entry:**
• Node A (1KB) - unwanted
• Node B (1KB) - wanted  
• Node C (1KB) - unwanted
• Node D (1KB) - unwanted
**75% waste!**
end note
deactivate oscache

kernel -> vmem: page now mapped
deactivate kernel
vmem -> app: return Node B data
deactivate vmem
' [/step2]

' [step3 {"name":"Step 3: Dual Cache Pollution - OS and CPU Caches", "newPage": "true"}]
note over app
**Got the data we wanted**
But at what cost?
end note

oscache -> cpucache: populate cache lines
activate cpucache

note over cpucache
**CPU Cache Pollution:**
• 64B cache line: Node A data
• 64B cache line: Node B data (wanted)
• 64B cache line: Node C data  
• 64B cache line: Node D data
**Evicts other useful data!**
end note

note over app, cpucache
**Read Amplification Summary:**
• Wanted: 1KB (Node B)
• Actually read: 4KB (entire page)
• Amplification factor: 4x
• Memory mapping ≠ magical efficiency
• Same waste as explicit read(4KB)!
end note

deactivate cpucache
' [/step3]

@enduml 