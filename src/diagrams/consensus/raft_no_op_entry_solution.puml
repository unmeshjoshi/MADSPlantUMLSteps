@startuml
!include ../../style.puml

participant "Athens" as athens
participant "Byzantium\n(Leader)" as byzantium
participant "Cyrene" as cyrene
participant "Delphi" as delphi
participant "Client" as client

title RAFT No-Op Entry Solution

' [step1 {"name":"Leader with Previous Term Entries"}]
note over athens: **Athens Log:**\nTerm 2: [1:Inc, 2:Dec]\nTerm 3: [3:Add] ← Prev term\nCommitIndex: 2

note over byzantium: **Byzantium Log:**\nTerm 2: [1:Inc, 2:Dec]\nTerm 3: [3:Add] ← Prev term\nCommitIndex: 2\n**New Leader (Term 5)**

note over cyrene: **Cyrene Log:**\nTerm 2: [1:Inc, 2:Dec]\nTerm 3: [3:Add] ← Prev term\nCommitIndex: 2

note over delphi: **Delphi Log:**\nTerm 2: [1:Inc, 2:Dec]\nTerm 4: [3:Set] ← HIGHER term!\nCommitIndex: 2

note over byzantium: **Problem:**\nEntry 3:Add from Term 3 exists on majority\nbut Delphi has 3:Set from HIGHER Term 4!\nCannot commit directly - safety risk!

note across #lightblue
**Step 1: Leader with Previous Term Entries**

Byzantium becomes leader but faces dilemma.
Majority has 3:Add(T3) but Delphi has 3:Set(T4).
Direct commitment would be unsafe.
end note
' [/step1]

' [step2 {"name":"No-Op Entry Creation", "newPage":"true"}]
note over byzantium: **Solution: Add No-Op Entry**\nCreate entry 4:NoOp in Term 5\nThis establishes current term in log

note over byzantium: **Updated Log:**\nTerm 2: [1:Inc, 2:Dec]\nTerm 3: [3:Add]\nTerm 5: [4:NoOp] ← Current term

note over byzantium: **No-Op Strategy:**\n• Don't commit previous term entries directly\n• Add current-term entry first\n• Commit current term, then previous terms are safe

note across #lightgreen
**Step 2: No-Op Entry Creation**

Leader creates no-op entry in current term 5.
This establishes current term authority.
Safe to commit current-term entries.
end note
' [/step2]

' [step3 {"name":"Replicate No-Op Entry", "newPage":"true"}]
byzantium -> athens: AppendEntries(term=5, prevLogIndex=3, prevLogTerm=3,\nentries=[4:NoOp], leaderCommit=2)
byzantium -> cyrene: AppendEntries(term=5, prevLogIndex=3, prevLogTerm=3,\nentries=[4:NoOp], leaderCommit=2)
byzantium -> delphi: AppendEntries(term=5, prevLogIndex=2, prevLogTerm=2,\nentries=[3:Add, 4:NoOp], leaderCommit=2)

note over athens: **Accept no-op entry**\nLog: [1:Inc, 2:Dec, 3:Add, 4:NoOp]
note over cyrene: **Accept no-op entry**\nLog: [1:Inc, 2:Dec, 3:Add, 4:NoOp]
note over delphi #orange: **Truncate conflicting entry!**\nRemove: [3:Set(T4)]\nAppend: [3:Add(T3), 4:NoOp(T5)]

athens -> byzantium: AppendReply(term=5, success=true, matchIndex=4)
cyrene -> byzantium: AppendReply(term=5, success=true, matchIndex=4)
delphi -> byzantium: AppendReply(term=5, success=true, matchIndex=4)

note across #lightgreen
**Step 3: Replicate No-Op Entry**

Delphi truncates its higher-term conflicting entry.
All followers now have consistent logs.
No-op entry replicated to majority.
end note
' [/step3]

' [step4 {"name":"No-Op Entry Committed", "newPage":"true"}]
note over byzantium: **Commitment Decision:**\nNo-op entry (index 4, term 5) replicated on majority\nSafe to commit current-term entry!

note over byzantium: **Update Commit Index:**\nCommitIndex: 2 → 4\nBoth entries 3:Add and 4:NoOp now committed!

note over byzantium: **Result:**\n✓ Entry 3:Add now committed via no-op\n✓ Entry 4:NoOp committed (current term)\n✓ Delphi's conflicting entry safely overwritten

note across #lightgreen
**Step 4: No-Op Entry Committed**

Current-term no-op entry safely committed.
Previous term entry 3:Add becomes committed.
Delphi's higher-term conflict resolved.
end note
' [/step4]

' [step5 {"name":"Propagate Commit Information", "newPage":"true"}]
byzantium -> athens: AppendEntries(term=5, entries=[], leaderCommit=4)
byzantium -> cyrene: AppendEntries(term=5, entries=[], leaderCommit=4)
byzantium -> delphi: AppendEntries(term=5, entries=[], leaderCommit=4)

note over athens: **Update Commit Index:**\nCommitIndex: 2 → 4\nExecute: 3:Add, 4:NoOp

note over cyrene: **Update Commit Index:**\nCommitIndex: 2 → 4\nExecute: 3:Add, 4:NoOp

note over delphi: **Update Commit Index:**\nCommitIndex: 2 → 4\nExecute: 3:Add, 4:NoOp\n~~3:Set(T4) overwritten~~

note across #lightgreen
**Step 5: Propagate Commit Information**

All followers execute committed entries.
Delphi's conflicting entry permanently removed.
System reaches consistent committed state.
end note
' [/step5]

' [step6 {"name":"Safety Against Future Partition", "newPage":"true"}]
note over delphi #orange: **What if Delphi becomes leader later?**\nAttempts election for Term 6

note over delphi: **Delphi's Log now:**\nTerm 2: [1:Inc, 2:Dec]\nTerm 3: [3:Add] ← Same as others!\nTerm 5: [4:NoOp]\n\nNo conflicting entries remain!

note over athens, cyrene: **All nodes have identical logs:**\n[1:Inc, 2:Dec, 3:Add(T3), 4:NoOp(T5)]

note over delphi: **If Delphi becomes leader:**\nCannot overwrite committed entries\nMust preserve existing log structure

note across #lightblue
**Step 6: Safety Against Future Partition**

No-op solution prevents future safety violations.
Even if Delphi becomes leader, it has consistent log.
No conflicting entries remain to cause problems.
end note
' [/step6]

' [step7 {"name":"No-Op Solution Summary", "newPage":"true"}]
note across #lightgreen
**RAFT No-Op Entry Solution:**

• **Solves previous term commitment problem**
• **Handles higher-term conflicting entries safely**
• **Forces log convergence through truncation**
• **Enables safe commitment without recovery queries**

**Key Safety Properties:**
✅ Previous term entries committed safely
✅ Higher-term conflicts resolved through truncation
✅ Future leaders cannot create inconsistencies
✅ No recovery overhead like Multi-Paxos
✅ Maintains linearizability guarantees

**No-Op Strategy:**
1. Create current-term no-op entry
2. Replicate to majority (forces truncation)
3. Commit current-term entry safely
4. Previous entries automatically committed
end note
' [/step7]

@enduml 