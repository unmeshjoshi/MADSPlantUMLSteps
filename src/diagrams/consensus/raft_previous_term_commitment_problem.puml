@startuml
!include ../../style.puml

participant "Athens" as athens
participant "Byzantium" as byzantium
participant "Cyrene" as cyrene
participant "Delphi" as delphi
participant "Client" as client
participant "Client1" as client1
participant "Client2" as client2

title RAFT Previous Term Commitment Problem

' [step1 {"name":"Previous Term Entries Exist"}]
note over athens: **Athens Log:**\nTerm 2: [1:Inc, 2:Dec]\nTerm 3: [3:Add] ← Prev term\nCommitIndex: 2

note over byzantium: **Byzantium Log:**\nTerm 2: [1:Inc, 2:Dec]\nTerm 3: [3:Add] ← Prev term\nCommitIndex: 2\n**Current Leader (Term 5)**

note over cyrene: **Cyrene Log:**\nTerm 2: [1:Inc, 2:Dec]\nTerm 3: [3:Add] ← Prev term\nCommitIndex: 2

note over byzantium: **Entry 3:Add from Term 3**\nexists on majority (3/4)\nCan I commit it directly?

note across #lightblue
**Step 1: Previous Term Entries Exist**

Byzantium is leader for Term 5 with entries
from previous terms replicated on majority.
Question: Can leader commit these entries?
end note
' [/step1]

' [step2 {"name":"The Commitment Dilemma", "newPage":"true"}]
client -> byzantium: "What's the status of 3:Add?"

note over byzantium: **Dilemma:**\n✓ Entry exists on majority\n✓ Entry appears committed\n✗ But it's from previous term!\n✗ RAFT rule: Can't commit prev term entries

byzantium -> client: "Entry not yet committed.\nWaiting for current term entry."

note over byzantium: **RAFT Safety Rule:**\nLeader can only commit entries\nfrom its own current term

note across #orange
**Step 2: The Commitment Dilemma**

Entry 3:Add is on majority but from previous term.
RAFT safety requires leader cannot directly
commit entries from previous terms.
end note
' [/step2]

' [step3 {"name":"Why This Restriction Exists", "newPage":"true"}]
note over athens, byzantium: **Majority has:**\n[1:Inc, 2:Dec, 3:Add(T3)]
note over cyrene: **Cyrene has:**\n[1:Inc, 2:Dec, 3:Add(T3)]
note over delphi #lightcoral: **Delphi (partitioned):**\n[1:Inc, 2:Dec, 3:Set(T4)] ← HIGHER term!

note over delphi: **Delphi was partitioned**\nhas conflicting entry 3:Set\nfrom HIGHER term 4!

note across #lightcoral
**Step 3: Why This Restriction Exists**

Demonstrates the safety issue that could occur
if leaders committed previous term entries.
Delphi has entry from HIGHER term 4.
end note
' [/step3]

' [step4 {"name":"Network Partition Scenario", "newPage":"true"}]
note over athens #orange: **Network partition!**\nAthens unreachable from others

note across #lightyellow
**New Election in Partition:**
Byzantium, Cyrene & Delphi form majority (3/4)
Delphi becomes leader (Term 6)
end note

note over delphi #lightgreen: **Delphi becomes leader (Term 6)**\nMy log has 3:Set(T4) - HIGHER term!\nI'm the authority for index 3

note over delphi: **Delphi's reasoning:**\n[1:Inc, 2:Dec, 3:Set(T4)]\nMy entry 3 has term 4 > their term 3\nI should overwrite their "wrong" entry

delphi -> cyrene: AppendEntries(term=6, prevIndex=2, prevTerm=2,\nentries=[3:Set])
delphi -> byzantium: AppendEntries(term=6, prevIndex=2, prevTerm=2,\nentries=[3:Set])

note across #lightcoral
**Step 4: Network Partition Scenario**

Delphi becomes leader with Term 6.
Delphi forces its higher-term entry 3:Set(T4)
to overwrite others' 3:Add(T3).
end note
' [/step4]

' [step5 {"name":"Safety Violation Illustrated", "newPage":"true"}]
note over cyrene: **Cyrene accepts:**\nTruncate 3:Add(T3)\nAppend 3:Set(T4)

note over byzantium: **Byzantium accepts:**\nTruncate 3:Add(T3)\nAppend 3:Set(T4)

cyrene -> delphi: AppendReply(term=6, success=true)
byzantium -> delphi: AppendReply(term=6, success=true)

note over delphi #lightgreen: **Delphi commits:**\nEntry 3:Set is now committed\nIndex 3 has been "corrected"

note over byzantium #orange: **The safety violation:**\nIf I had committed 3:Add(T3) earlier,\nClient1 would have seen it as committed!

client1 -> byzantium: Query("What happened to 3:Add?")
byzantium --> client1: "It was overwritten by 3:Set\n(but you might have seen it committed)"

client2 -> delphi: Query("What's in slot 3?")
delphi -> client2: "3:Set (correctly committed)"

note across #lightcoral
**Safety Violation:**

Client1 might have previously seen 3:Add as committed,
but now slot 3 contains 3:Set!
A "committed" entry was overwritten.
end note
' [/step5]

' [step6 {"name":"RAFT's Solution Preview", "newPage":"true"}]
note over delphi: **Why this happened:**\nPrevious leader committed entry\nfrom previous term without safety

note over delphi: **RAFT Solution:**\n1. Never commit previous term entries directly\n2. Add a no-op entry in current term\n3. Once no-op is committed, all previous entries become committed\n4. Higher-term conflicting entries get truncated

note across #orange
**Step 6: RAFT's Solution Preview**

RAFT prevents this by requiring leaders
to commit current-term entries first.
This forces conflicting higher-term entries to be truncated.
end note
' [/step6]

' [step7 {"name":"Problem Summary", "newPage":"true"}]
note across #orange
**Why Previous Term Commitment is Prohibited:**

• **Prevents safety violations during partitions**
• **Ensures linearizability guarantees**  
• **Requires explicit current-term commitment**
• **Foundation for RAFT's safety properties**

**Previous Term Commitment Problem:**
❌ Direct commitment of previous term entries
❌ Could lead to inconsistent client views
❌ Violates linearizability guarantees
✅ Solved by no-op entry pattern
✅ Ensures safety during partitions

**Key Insight:**
Committing previous term entries could create
safety violations when partitions expose
conflicting entries from higher terms.
end note
' [/step7]

@enduml 