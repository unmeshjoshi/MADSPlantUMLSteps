@startuml
!include ../../style.puml

actor Client1
actor Client2
participant Athens
participant Byzantium 
participant Cyrene 

title Why Accepted Requests Cannot Be Forgotten

' [step1 {"name":"Initial State: Request Accepted by Quorum"}]

note over Athens
Generation: 5
Accepted: "IncrementCounter"
State: ACCEPTED
end note

note over Byzantium
Generation: 5
Accepted: "IncrementCounter"
State: ACCEPTED
end note

note over Cyrene
Generation: 3
Accepted: ""
State: NONE
end note

hnote over Athens, Byzantium #lightgreen
Quorum has accepted "IncrementCounter"
with Generation 5
end note

' [/step1]

' [step2 {"name":"Scenario: Athens Forgets and Network Issues", "newPage":"true"}]

note over Athens #lightcoral
DANGER: Athens "forgets" 
its accepted request
Generation: 5
Accepted: ""  ← WRONG!
State: NONE
end note

note over Byzantium
Generation: 5
Accepted: "IncrementCounter"
State: ACCEPTED
end note

note over Cyrene
Generation: 3
Accepted: ""
State: NONE
end note

Client2 -> Athens: "DecrementCounter"

' [/step2]

' [step3 {"name":"Athens Starts New Round with Higher Generation", "newPage":"true"}]

Athens -> Athens: prepare(Generation=6)
Athens -> Byzantium: prepare(Generation=6)
Athens -> Cyrene: prepare(Generation=6)

Athens -> Athens: promise(Generation=6, no_accepted_request)
Athens x-[#red]- Byzantium: Failed to respond
Athens <-- Cyrene: promise(Generation=6, no_accepted_request)

note over Athens #red
CRITICAL PROBLEM:
- Athens forgot its accepted request
- Byzantium's response is lost
- Athens only sees "no accepted requests"
end note

' [/step3]

' [step4 {"name":"The Dangerous Decision", "newPage":"true"}]

note over Athens #lightcoral
Athens thinks there are no
previously accepted requests
and proceeds with its own request
end note

Athens -> Athens: accept("DecrementCounter", Generation=6)
Athens -> Byzantium: accept("DecrementCounter", Generation=6)
Athens -> Cyrene: accept("DecrementCounter", Generation=6)

Athens <-- Athens: accepted
Athens <-- Byzantium: accepted
Athens <-- Cyrene: accepted

hnote over Athens, Cyrene #red
SAFETY VIOLATION!
Two different requests could be committed:
- "IncrementCounter" (from previous round)
- "DecrementCounter" (from current round)
end note

' [/step4]

' [step5 {"name":"Why This Violates Safety", "newPage":"true"}]

hnote over Athens, Cyrene #red
**The Problem:**
Athens and Byzantium had "IncrementCounter" accepted.
Athens might have committed it. But it 'forgot' 
the accepted request. (May be after a crash and restart).
This lead to a situation where on Athens, we have IncremenCounter
executed, but on other nodes we never had it executed,
and they directly executed "DecrementCounter".

**Result:** Inconsistent state on all nodes!
end note

' [/step5]

' [step6 {"name":"The Correct Behavior: Never Forget", "newPage":"true"}]

note over Athens #lightgreen
Athens MUST never forget
accepted requests, even after
crashes or restarts
end note

note over Athens
Generation: 5
Accepted: "IncrementCounter"
State: ACCEPTED ← PRESERVED!
end note

Athens -> Athens: prepare(Generation=6)
Athens -> Byzantium: prepare(Generation=6)
Athens -> Cyrene: prepare(Generation=6)

Athens --> Athens: promise(Generation=6, accepted="IncrementCounter", Generation=5)
Athens x-[#red]- Byzantium: promise(Generation=6, accepted="IncrementCounter", Generation=5)
Athens <-- Cyrene: promise(Generation=6, no_accepted_request)

hnote over Athens #lightgreen
Even with lost message, Athens
knows about "IncrementCounter"
from its own memory
end note

' [/step6]

' [step7 {"name":"Safety Preserved", "newPage":"true"}]

note over Athens #lightgreen
Athens uses the accepted request
from its own memory
end note

Athens -> Athens: accept("IncrementCounter", Generation=6)
Athens -> Byzantium: accept("IncrementCounter", Generation=6)
Athens -> Cyrene: accept("IncrementCounter", Generation=6)

Athens <-- Athens: accepted
Athens <-- Byzantium: accepted
Athens <-- Cyrene: accepted

hnote over Athens, Cyrene #lightgreen
SAFETY PRESERVED!
Only "IncrementCounter" can be committed
end note

' [/step7]

' [step8 {"name":"Why This Rule is Critical", "newPage":"true"}]

hnote over Athens, Cyrene #lightyellow
**Key Insight:**
Nodes must persist accepted requests to stable storage
and never "forget" them, even across crashes.

**The Rule:**
During prepare phase, use the highest generation request
from BOTH own memory AND responses from other nodes.

**This ensures:**
- Only one request can ever be committed
- Safety is maintained across failures and network issues
- Consensus remains consistent even with lost messages
end note

' [/step8]

@enduml 