@startuml
!include ../../style.puml

title High-Water Mark Execution

' [step1 {"name":"Log State with Gaps"}]
participant "Athens" as athens
participant "Byzantium" as byzantium
participant "Cyrene" as cyrene

note over athens: **Athens' Log:**\n[1] IncrementCounter (committed)\n[2] ??? (uncommitted)\n[3] DecrementCounter (committed)\n[4] <empty>

note over byzantium: **Byzantium's Log:**\n[1] IncrementCounter (committed)\n[2] ??? (uncommitted)\n[3] DecrementCounter (committed)\n[4] <empty>

note over cyrene: **Cyrene's Log:**\n[1] IncrementCounter (committed)\n[2] ??? (uncommitted)\n[3] DecrementCounter (committed)\n[4] <empty>

note over athens, cyrene #yellow: **Problem**: Slot 2 is not committed yet!\nCannot execute Slot 3 out of order
' [/step1]

' [step2 {"name":"High-Water Mark Calculation", "newPage":"true"}]
note across #lightblue
**High-Water Mark Calculation:**

• **Definition**: Highest consecutive slot number where ALL preceding slots are committed
• **Current State**: Slot 1 (committed), Slot 2 (uncommitted), Slot 3 (committed)
• **High-Water Mark = 1** (only Slot 1 and all before it are committed)

**Rule**: Execute only up to high-water mark
end note
' [/step2]

' [step3 {"name":"Current Execution State", "newPage":"true"}]
note over athens: **Execution Status:**\n✓ Slot 1: IncrementCounter (executed)\n⏸ Slot 2: Waiting for commit\n⏸ Slot 3: Cannot execute yet

note over athens, cyrene #pink: **Cannot execute Slot 3**\neven though it's committed!\n\nMust wait for Slot 2 to maintain order
' [/step3]

' [step4 {"name":"Slot 2 Gets Committed", "newPage":"true"}]
group #LightGreen "Slot 2 Consensus Completes"
    note over athens: Slot 2 consensus finishes:\nSetCounter(value=10) committed
    
    note over athens: **Updated Log:**\n[1] IncrementCounter (committed, executed)\n[2] SetCounter(10) (committed)\n[3] DecrementCounter (committed)\n[4] <empty>
end

note over athens, cyrene #lightgreen: **High-Water Mark = 3**\nAll slots 1, 2, 3 are now committed!
' [/step4]

' [step5 {"name":"Execute Up to High-Water Mark", "newPage":"true"}]
group #LightYellow "Sequential Execution"
    note over athens: Execute Slot 2:\nSetCounter(10)\nCounter = 10
    
    note over athens: Execute Slot 3:\nDecrementCounter\nCounter = 10 - 1 = 9
    
    note over athens: **High-Water Mark = 3**\nAll requests executed in order
end

note over athens, cyrene #lightgreen: **Final State: Counter = 9**\nConsistent across all nodes
' [/step5]

' [step6 {"name":"Why High-Water Mark is Critical", "newPage":"true"}]
note across #lightyellow
**Why High-Water Mark is Essential:**

• **Ordering Guarantee**: Ensures requests execute in exact log order
• **Consistency**: All nodes execute same sequence of operations  
• **Safety**: Prevents out-of-order execution that could break semantics
• **Gaps Handling**: Gracefully handles uncommitted slots in the middle

**Example**: If Slot 2 was "ResetCounter" and Slot 3 was "IncrementCounter",
executing them out of order would give wrong results!
end note
' [/step6]

@enduml 