@startuml
!include ../../style.puml

participant "Client A" as clientA
participant "Client B" as clientB
participant "Athens\n(Old Leader)" as athens
participant "Byzantium\n(New Leader)" as byzantium
participant "Cyrene" as cyrene

title Multi-Paxos: Leader Failure and Recovery

' [step1 {"name":"Normal Operation - Athens as Leader"}]
note over athens: **Athens (Leader)**\nGeneration = 5\nLeadership established

note over athens
==Log==
IncrementCounter (gen=5) ✓
----
DecrementCounter (gen=5) ✓
----
SetCounter(10) (gen=5)
----
<empty>
====
High-Water Mark = 2
end note

clientA -> athens: AddCounter(3)
clientB -> athens: MultiplyCounter(2)

note over athens: **Process AddCounter(3)**\nAssign to Slot 4\nUse existing leadership (gen=5)

group #LightGreen "Partial Request Processing"
    athens -> athens: Accept(gen=5, slot=4, "AddCounter(3)")
    athens -> cyrene: Accept(gen=5, slot=4, "AddCounter(3)")
    
    athens -> athens: Accepted(slot=4)
    cyrene -> athens: Accepted(slot=4)
    
    note over athens #yellow: **Ready to commit**\nBut failure occurs before commit phase
end
' [/step1]

' [step2 {"name":"Leader Failure During Processing", "newPage":"true"}]
group #Red "Leader Failure"
    athens -[#red]x athens: Athens crashes before commit phase
    
    note over athens #red: **Athens Failed**\nAddCounter(3) accepted but not committed\nMultiplyCounter(2) not processed
end

clientA -[#red]x athens: No response (timeout)
clientB -[#red]x athens: No response (timeout)

note over clientA #orange: **Client Dilemma:**\nDid AddCounter(3) execute?\nShould I retry the request?

note over clientB #orange: **Client Dilemma:**\nDid MultiplyCounter(2) execute?\nShould I retry the request?

note over byzantium, cyrene #yellow: **Leadership Lost**\nSlot 4 has accepted request but not committed\nByzantium and Cyrene must elect new leader
' [/step2]

' [step3 {"name":"New Leader Election", "newPage":"true"}]
group #LightBlue "Leader Election (Prepare Phase)"
    note over byzantium: **Byzantium triggers leader election**\nChooses Generation = 6 (higher than 5)
    
    byzantium -> byzantium: Prepare(gen=6)
    byzantium -> cyrene: Prepare(gen=6)
    
    byzantium -> byzantium: Promise(gen=6, no pending entries)
    cyrene -> byzantium: Promise(gen=6, slot=4: "AddCounter(3)" gen=5)
    
    note over byzantium #lightgreen: **Byzantium becomes Leader**\nGeneration = 6 established\nDiscovered pending: AddCounter(3)
end
' [/step3]

' [step4 {"name":"Recovery Phase", "newPage":"true"}]
group #LightYellow "Recovery for All Uncommitted Slots"
    note over byzantium: **Recovery Process:**\n1. Found AddCounter(3) in slot=4 with gen=5\n2. Apply highest generation rule\n3. Re-commit with new generation
    
    note over byzantium: Slot 3: Found SetCounter(10) (gen=5)\nSlot 4: Found AddCounter(3) (gen=5)\nMust re-commit both with gen=6
    
    byzantium -> byzantium: Accept(gen=6, slot=3, "SetCounter(10)")
    byzantium -> cyrene: Accept(gen=6, slot=3, "SetCounter(10)")
    
    byzantium -> byzantium: Accept(gen=6, slot=4, "AddCounter(3)")
    byzantium -> cyrene: Accept(gen=6, slot=4, "AddCounter(3)")
    
    byzantium -> byzantium: Accepted(slot=3,4)
    cyrene -> byzantium: Accepted(slot=3,4)
    
    note over byzantium #lightgreen: Slots 3,4 committed!\nHigh-Water Mark = 4
end

note over byzantium #orange: **Critical: No response to ClientA**\nNew leader doesn't know which client\nsent AddCounter(3) originally
' [/step4]

' [step5 {"name":"Client Retries - Need for Idempotent Receiver", "newPage":"true"}]
note over clientA #orange: **ClientA retries AddCounter(3)**\nDon't know if it was executed\nCould cause duplicate execution!

note over clientB #orange: **ClientB retries MultiplyCounter(2)**\nDon't know if it was executed\nCould cause duplicate execution!

clientA -> byzantium: AddCounter(3) [RETRY]
clientB -> byzantium: MultiplyCounter(2) [RETRY]

note over byzantium #red: **Problem Without Idempotent Receiver:**\nAddCounter(3) already executed in slot 4\nRetry would execute it AGAIN in slot 5!\nViolates exactly-once semantics

note across #red
**Critical Issue: Duplicate Execution**

Without proper handling:
• AddCounter(3) executed twice → Wrong result
• MultiplyCounter(2) executed twice → Wrong result
• System loses correctness guarantees

**Solution: Idempotent Receiver Pattern**
• Assign unique IDs to client requests
• Track processed requests
• Return cached results for duplicates
end note
' [/step5]

' [step6 {"name":"Final State After Recovery", "newPage":"true"}]
note over byzantium
**Byzantium (New Leader)**
Generation = 6
==Log==
IncrementCounter (gen=5) ✓
----
DecrementCounter (gen=5) ✓
----
SetCounter(10) (gen=6) ✓
----
AddCounter(3) (gen=6) ✓
====
High-Water Mark = 4
end note

note over cyrene
**Cyrene**
Generation = 6
==Log==
IncrementCounter (gen=5) ✓
----
DecrementCounter (gen=5) ✓
----
SetCounter(10) (gen=6) ✓
----
AddCounter(3) (gen=6) ✓
====
High-Water Mark = 4
end note

note across #lightgreen: **Multi-Paxos Recovery Complete:**\nPreviously accepted request preserved and committed\nBut client retry problem remains unsolved
' [/step6]

' [step7 {"name":"Production Requirement", "newPage":"true"}]
note across #lightblue
**Multi-Paxos in Production Requires:**

✓ **Consensus Safety**: Achieved through generation numbers and quorum overlap
✓ **Leader Election**: Achieved through prepare phase and heartbeats  
✓ **Failure Recovery**: Achieved through highest generation rule
✗ **Client Retry Safety**: Requires Idempotent Receiver pattern

**Next: Implement Idempotent Receiver for client retry safety**

**Problem Solved by Idempotent Receiver:**
• Clients don't know if requests were processed during failures
• Retries can cause duplicate execution without proper deduplication
• Need unique request IDs and response caching for safety
end note
' [/step7]

@enduml 