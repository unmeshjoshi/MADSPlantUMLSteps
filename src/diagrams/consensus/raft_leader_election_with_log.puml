@startuml
!include ../../style.puml

participant "Athens" as athens
participant "Byzantium" as byzantium 
participant "Cyrene" as cyrene

title RAFT Leader Election with Log Information

' [step1 {"name":"Initial State"}]
note over athens: **Athens Log:**\nTerm 3: [1:Inc, 2:Dec]\nLast: (term=3, index=2)

note over byzantium: **Byzantium Log:**\nTerm 3: [1:Inc, 2:Dec, 3:Add]\nLast: (term=3, index=3)

note over cyrene: **Cyrene Log:**\nTerm 2: [1:Set(T2)]\nLast: (term=2, index=1)

note across #lightblue
**Step 1: Initial State**

All nodes have logs with different states.
Byzantium has the most up-to-date log.
Cyrene has CONFLICTING entry at index 1.
end note
' [/step1]

' [step2 {"name":"Election Timeout", "newPage":"true"}]
note over byzantium #orange: **Election timeout!**\nBecome candidate for term 4\nNote: Byzantium HAS the most up-to-date log

byzantium -> athens: RequestVote(term=4, candidateId=Byzantium,\nlastLogTerm=3, lastLogIndex=3)
byzantium -> cyrene: RequestVote(term=4, candidateId=Byzantium,\nlastLogTerm=3, lastLogIndex=3)

note over byzantium: **Vote Request includes:**\n• Current term (4)\n• Last log term (3)\n• Last log index (3) ← Most recent

note across #lightyellow
**Step 2: Election Timeout**

Byzantium times out and starts election.
Byzantium HAS the most up-to-date log.
This demonstrates RAFT's optimization.
end note
' [/step2]

' [step3 {"name":"Log Comparison and Acceptance", "newPage":"true"}]
note over athens #lightblue: **Log Comparison:**\nByzantium: (term=3, index=3)\nSelf:      (term=3, index=2)\n\nIndex 3 > 2, so Byzantium is more recent

athens -> byzantium: VoteReply(term=4, voteGranted=true)
note over athens: "I'll vote for Byzantium\nbecause its log is more up-to-date"

note over cyrene: **Log Comparison:**\nByzantium: (term=3, index=3)\nSelf:      (term=2, index=1)\n\nTerm 3 > 2, so Byzantium is much more recent

cyrene -> byzantium: VoteReply(term=4, voteGranted=true)

note across #lightgreen
**Step 3: Log Comparison and Acceptance**

Both Athens and Cyrene accept Byzantium.
Byzantium has the most up-to-date log.
RAFT's "at least as up-to-date" rule works!
end note
' [/step3]

' [step4 {"name":"Byzantium Wins Election", "newPage":"true"}]
note over byzantium #lightgreen: **Election Result:**\nVotes received: 3/3 (unanimous!)\nMajority achieved: 3/3 ✓\n\nByzantium WINS the election!

note over byzantium: **Byzantium becomes leader for term 4**\nHas the most recent log already\nNo recovery queries needed

note across #lightgreen
**Step 4: Byzantium Wins Election**

Byzantium gets unanimous votes.
Leader already has most recent log state.
This is RAFT's key optimization.
end note
' [/step4]

' [step5 {"name":"Immediate Operation Ready", "newPage":"true"}]
participant "Client" as client

note over byzantium: **Ready to serve immediately:**\n• Already have latest log\n• No need to query followers\n• Can immediately process new requests

note across #lightgreen
**Step 5: Immediate Operation Ready**

Unlike Multi-Paxos, no recovery phase needed.
Leader election ensured winner has latest log.
System is ready to serve clients immediately.
end note
' [/step5]

' [step6 {"name":"Client Request Processing", "newPage":"true"}]
client -> byzantium: New request: SetCounter(5)

note over byzantium: **First attempt:**\nTry to append new entry at index 4\nAssume followers are up to date

byzantium -> athens: AppendEntries(term=4, prevLogIndex=3, prevLogTerm=3,\nentries=[4:SetCounter(5)])
byzantium -> cyrene: AppendEntries(term=4, prevLogIndex=3, prevLogTerm=3,\nentries=[4:SetCounter(5)])

note over athens: **Consistency check FAILS:**\nI don't have entry 3 ✗

note over cyrene: **Consistency check FAILS:**\nI don't have entry 3 ✗

athens -> byzantium: AppendEntriesReply(success=false)
cyrene -> byzantium: AppendEntriesReply(success=false)

note across #lightcoral
**Step 6: Initial Append Attempt Fails**

Byzantium tries to append at expected position.
Both followers reject due to missing entries.
This triggers RAFT's backtracking algorithm.
end note
' [/step6]

' [step7 {"name":"Backtracking and Log Repair", "newPage":"true"}]
note over byzantium: **Backtracking algorithm:**\nDecrement nextIndex for failed followers\nFind where logs diverge

byzantium -> athens: AppendEntries(term=4, prevLogIndex=2, prevLogTerm=3,\nentries=[3:Add, 4:SetCounter(5)])
byzantium -> cyrene: AppendEntries(term=4, prevLogIndex=0, prevLogTerm=0,\nentries=[1:Inc, 2:Dec, 3:Add, 4:SetCounter(5)])

note over athens: **Consistency check passes:**\nI have entry 2 with term 3 ✓

note over cyrene: **Starting from beginning:**\nPrevLogIndex=0 always succeeds ✓\n**Truncate conflicting log:**\nRemove: [1:Set(T2)]\nAppend entire leader log

athens -> byzantium: AppendEntriesReply(success=true)
cyrene -> byzantium: AppendEntriesReply(success=true)

note across #lightgreen
**Step 7: Successful Log Synchronization**

Athens: Append missing entries 3 and 4
Cyrene: Truncate conflicting log and rebuild completely
All followers now have consistent logs
end note
' [/step7]

' [step8 {"name":"Key RAFT Advantage", "newPage":"true"}]
note across #lightgreen
**Key RAFT Advantage:**

Leader already has most recent log state.
No recovery phase needed.
Can immediately start serving clients.

**RAFT Optimization Summary:**
• Log-based leader election ensures winner has latest state
• No post-election recovery queries needed
• Much faster than Multi-Paxos recovery process
end note
' [/step8]

@enduml 