import com.pumlsteps.PlantUmlProcessor
import com.pumlsteps.presentation.YamlPresentationProcessor
import com.pumlsteps.presentation.HtmlGenerator

import java.nio.file.Files
import java.nio.file.Paths

import static groovy.io.FileType.*
import java.nio.file.StandardCopyOption


plugins {
    id 'java'
    id 'groovy'
}

// Gradle task to generate diagrams for all .puml files in the source directory
task generateSvgDiagrams {
    doLast {
        def plantUmlJarPath = './plantuml-1.2024.8.jar'
        def sourceDir = file('src/diagrams')
        def outputDir = file('build/diagrams')
        outputDir.mkdirs()

        if (!sourceDir.exists() || !sourceDir.isDirectory()) {
            throw new GradleException("Source directory not found: ${sourceDir.absolutePath}")
        }

        // Copy style.puml to each output directory
        def styleFile = new File(sourceDir, 'style.puml')
        if (styleFile.exists()) {
            Files.copy(styleFile.toPath(), new File(outputDir, 'style.puml').toPath(), StandardCopyOption.REPLACE_EXISTING)
        } else {
            println "style.puml not found in source directory. Skipping style file copying."
        }

        try {
            def processor = new PlantUmlProcessor(plantUmlJarPath)
            processor.process(sourceDir, outputDir)
        } catch (Exception e) {
            println "Error: ${e.message}"
            e.printStackTrace()
        }
    }
}

task generatePngDiagrams {
    doLast {
        def plantUmlJarPath = './plantuml-1.2024.8.jar'
        def sourceDir = file('src/diagrams')
        def outputDir = file('build/diagrams-png')
        outputDir.mkdirs()

        if (!sourceDir.exists() || !sourceDir.isDirectory()) {
            throw new GradleException("Source directory not found: ${sourceDir.absolutePath}")
        }

        // Copy style.puml to each output directory
        def styleFile = new File(sourceDir, 'style.puml')
        if (styleFile.exists()) {
            Files.copy(styleFile.toPath(), new File(outputDir, 'style.puml').toPath(), StandardCopyOption.REPLACE_EXISTING)
        } else {
            println "style.puml not found in source directory. Skipping style file copying."
        }

        // Generate PNG diagrams for PowerPoint
        sourceDir.eachFileRecurse(FILES) { file ->
            if (file.name.endsWith('.puml') && !file.name.equals('style.puml')) {
                def relativePath = sourceDir.toPath().relativize(file.toPath()).toString()
                def baseFileName = file.name.substring(0, file.name.lastIndexOf('.'))
                
                // Create a subdirectory based on the file name
                def subDirName = ""
                if (relativePath.contains('/')) {
                    subDirName = relativePath.substring(0, relativePath.lastIndexOf('/'))
                }
                def outputSubDir = new File(outputDir, subDirName.isEmpty() ? baseFileName : subDirName + '/' + baseFileName)
                outputSubDir.mkdirs()
                
                println "Processing PNG file = ${file.absolutePath}"
                
                // Use StepImageGenerator directly to generate PNG files
                def stepParser = new com.pumlsteps.StepParser()
                def parsedPumlFile = stepParser.parse(new com.pumlsteps.PumlFile(file))
                def imageGenerator = new com.pumlsteps.StepImageGenerator(plantUmlJarPath)
                def steps = parsedPumlFile.getSteps()
                
                // Generate PNG images
                imageGenerator.generateDiagrams(steps, outputSubDir, com.pumlsteps.StepImageGenerator.ImageFormat.PNG)
                println "PNG steps = ${steps.size()}"
            }
        }
    }
}

// For backward compatibility
task generate {
    dependsOn generateSvgDiagrams
}

task generateHtml {
    dependsOn generateSvgDiagrams  // This ensures SVG diagrams are generated before creating the HTML

    doLast {
        def presentationDir = file('src/presentation')
        def buildDir = file('build/presentations')
        
        // Create build directory if it doesn't exist
        buildDir.mkdirs()
        
        // Copy required assets to build directory
        copy {
            from('.') {
                include 'styles.css'
                include 'presentation.js'
            }
            into buildDir
        }
        
        // Generate version.txt with build timestamp
        def versionFile = new File(buildDir, 'version.txt')
        def timestamp = new Date().format("yyyy-MM-dd HH:mm:ss z")
        versionFile.text = "Built on: ${timestamp}\n"
        
        // Process each YAML file in the presentation directory
        presentationDir.eachFile { yamlFile ->
            if (yamlFile.name.endsWith('.yaml')) {
                def htmlFileName = yamlFile.name.replace('.yaml', '.html')
                def htmlFile = new File(buildDir, htmlFileName)
                // Create new generator instance for each file
                def generator = new HtmlGenerator()
                generator.generateHtmlFromYaml(yamlFile, htmlFile)
                println "Generated ${htmlFile.name} from ${yamlFile.name}"
            }
        }
        
        println "HTML presentations generated in: ${buildDir.absolutePath}"
    }
}

task generatePresentationFromYaml {
    // No need to depend on generatePngDiagrams as we generate PNGs on-the-fly
    doLast {
        def presentationDir = file('src/presentation')
        def buildDir = file('build/presentations')
        
        // Create build directory if it doesn't exist
        buildDir.mkdirs()
        
        // Process each YAML file in the presentation directory
        presentationDir.eachFile { yamlFile ->
            if (yamlFile.name.endsWith('.yaml')) {
                def outputFileName = yamlFile.name.replace('.yaml', '.pptx')
                def outputFile = new File(buildDir, outputFileName)
                
                // Create a YamlPresentationProcessor that will generate PNG files on-the-fly
                def processor = new YamlPresentationProcessor(projectDir)
                processor.processYamlToPresentation(yamlFile, outputFile)
                
                println "Generated ${outputFile.name} from ${yamlFile.name}"
            }
        }
        
        println "PowerPoint presentations generated in: ${buildDir.absolutePath}"
    }
}

task generatePresentation {
    dependsOn generatePresentationFromYaml
    dependsOn generateHtml
    
    doLast {
        println "\nGeneration complete!\n"
        println "HTML presentations (with SVG diagrams) are in: ${file('build/presentations').absolutePath}"
        println "PowerPoint presentations (with on-the-fly PNG diagrams) are in: ${file('build/presentations').absolutePath}"
    }
}