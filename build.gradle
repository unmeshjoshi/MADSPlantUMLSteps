import com.pumlsteps.presentation.YamlPresentationProcessor
import com.pumlsteps.presentation.HtmlGenerator
import com.pumlsteps.presentation.IndexGenerator
import com.pumlsteps.StepImageGenerator
import com.pumlsteps.StepParser
import com.pumlsteps.PumlFile
import com.pumlsteps.FileSystemUtil

import java.nio.file.Files
import java.nio.file.Paths

import static groovy.io.FileType.*
import java.nio.file.StandardCopyOption


plugins {
    id 'java'
    id 'groovy'
}

// Gradle task to generate diagrams for all .puml files in the source directory
task svg {
    description = 'Generates SVG diagrams from PlantUML files'
    group = 'Documentation'
    doLast {
        def plantUmlJarPath = './plantuml-1.2024.8.jar'
        def sourceDir = file('src/diagrams')
        def outputDir = file('build/diagrams')
        
        // Create output directory if it doesn't exist
        outputDir.mkdirs()
        
        // Use StepImageGenerator to process all diagrams at once
        def imageGenerator = new StepImageGenerator(plantUmlJarPath)
        imageGenerator.generateImagesForDirectory(sourceDir, outputDir, StepImageGenerator.ImageFormat.SVG)
        
        println "✓ SVG diagrams generated in: ${outputDir.absolutePath}"
    }
}

task png {
    description = 'Generates PNG diagrams from PlantUML files'
    group = 'Documentation'
    doLast {
        def plantUmlJarPath = './plantuml-1.2024.8.jar'
        def sourceDir = file('src/diagrams')
        def outputDir = file('build/diagrams-png')
        
        // Create output directory if it doesn't exist
        outputDir.mkdirs()
        
        // Use StepImageGenerator to process all diagrams at once
        def imageGenerator = new StepImageGenerator(plantUmlJarPath)
        imageGenerator.generateImagesForDirectory(sourceDir, outputDir, StepImageGenerator.ImageFormat.PNG)
        
        println "✓ PNG diagrams generated in: ${outputDir.absolutePath}"
    }
}

task html {
    description = 'Generates HTML presentations with embedded SVG diagrams'
    group = 'Documentation'
    dependsOn svg  // This ensures SVG diagrams are generated before creating the HTML

    doLast {
        def presentationDir = file('src/presentation')
        def buildDir = file('build/presentations')
        
        // Create build directory if it doesn't exist
        buildDir.mkdirs()
        
        // Copy required assets to build directory
        copy {
            from('.') {
                include 'styles.css'
                include 'presentation.js'
            }
            into buildDir
        }
        
        // Generate version.txt with build timestamp
        def versionFile = new File(buildDir, 'version.txt')
        def timestamp = new Date().format("yyyy-MM-dd HH:mm:ss z")
        versionFile.text = "Built on: ${timestamp}\n"
        
        // Process each YAML file in the presentation directory
        presentationDir.eachFile { yamlFile ->
            if (yamlFile.name.endsWith('.yaml')) {
                def htmlFileName = yamlFile.name.replace('.yaml', '.html')
                def htmlFile = new File(buildDir, htmlFileName)
                // Create new generator instance for each file
                def generator = new com.pumlsteps.presentation.HtmlGenerator()
                generator.generateHtmlFromYaml(yamlFile, htmlFile)
                println "Generated ${htmlFile.name} from ${yamlFile.name}"
            }
        }
        
        // Generate dynamic index.html
        def indexGenerator = new com.pumlsteps.presentation.IndexGenerator()
        def indexFile = new File(file('build'), 'index.html')
        indexGenerator.generateIndex(presentationDir, indexFile)
        println "Generated dynamic index.html in build directory"
        
        println "✓ HTML presentations generated in: ${buildDir.absolutePath}"
    }
}

task ppt {
    description = 'Generates PowerPoint presentations from YAML files with PNG diagrams'
    group = 'Documentation'
    dependsOn png  // Depend on PNG diagrams
    
    doLast {
        def plantUmlJarPath = './plantuml-1.2024.8.jar'
        def presentationDir = file('src/presentation')
        def buildDir = file('build/presentations')
        def diagramsDir = file('build/diagrams-png')
        
        // Create build directory if it doesn't exist
        buildDir.mkdirs()
        
        // Create a central directory for all PNG files within the build directory
        def centralPngDir = file('build/diagrams-png')
        centralPngDir.mkdirs()
        println "Using central PNG directory for all presentations: ${centralPngDir.absolutePath}"
        // Process each YAML file in the presentation directory
        presentationDir.eachFile { yamlFile ->
            if (yamlFile.name.endsWith('.yaml')) {
                def outputFileName = yamlFile.name.replace('.yaml', '.pptx')
                def outputFile = new File(buildDir, outputFileName)
                
                // Create a YamlPresentationProcessor that will use pre-generated SVG files
                def processor = new YamlPresentationProcessor(projectDir, plantUmlJarPath)
                
                // Set the central PNG directory
                processor.setCentralPngDirectory(centralPngDir)
                
                // Process the YAML file to create the presentation
                processor.processYamlToPresentation(yamlFile, outputFile)
                
                println "Generated ${outputFile.name} from ${yamlFile.name}"
            }
        }
        
        println "✓ PowerPoint presentations generated in: ${buildDir.absolutePath}"
    }
}

task all {
    description = 'Generates all presentation formats (HTML and PowerPoint)'
    group = 'Documentation'
    dependsOn ppt
    dependsOn html
    
    doLast {
        println "\n✓ Generation complete!\n"
        println "HTML presentations (with SVG diagrams) are in: ${file('build/presentations').absolutePath}"
        println "PowerPoint presentations (with PNG diagrams) are in: ${file('build/presentations').absolutePath}"
        println "\nRun with: ./gradlew [task]"
        println "Available tasks: svg, png, html, ppt, all"
    }
}